<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/home/shashankrao/</title>
    <link>https://shashank-93rao.github.io/</link>
    <description>Recent content on /home/shashankrao/</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Sep 2025 21:52:55 +0530</lastBuildDate>
    <atom:link href="https://shashank-93rao.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Paxos</title>
      <link>https://shashank-93rao.github.io/posts/paxos/</link>
      <pubDate>Mon, 29 Sep 2025 21:52:55 +0530</pubDate>
      <guid>https://shashank-93rao.github.io/posts/paxos/</guid>
      <description>&lt;p&gt;Paxos is a simple &lt;a href=&#34;https://shashank-93rao.github.io/posts/consensus&#34;&gt;Consensus&lt;/a&gt; algorithm.&#xA;It was introduced by Leslie Lamport. Can read more &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/paxos-simple.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Paxos guarantees that there is consensus among multiple processes.&lt;/p&gt;&#xA;&lt;p&gt;Setup: X nodes/processes&#xA;Works in phases:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The proposer chooses a proposal number &lt;em&gt;p&lt;/em&gt; with the given value &lt;em&gt;v&lt;/em&gt;. It sends the message &lt;em&gt;prepare(p,v)&lt;/em&gt; to a set of nodes &amp;gt;= x/2 + 1 (majority)&lt;/li&gt;&#xA;&lt;li&gt;At the acceptor end, there are two cases:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Received prepare(p,v). Already accepted a proposal (x, y) where &lt;em&gt;x&amp;gt;p&lt;/em&gt;. Ignore the message (or send a negative reply).&lt;/li&gt;&#xA;&lt;li&gt;If already accepted proposal (x, y) where &lt;em&gt;x&amp;lt;p&lt;/em&gt;. Promise the proposer that I won&amp;rsquo;t accept any proposal with proposal number &amp;lt; p. Send the values &lt;em&gt;(x,y)&lt;/em&gt; as part of promise to the proposer. (if nothing was previously promised, then send p,v)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;At proposer end:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;If the majority of acceptors did not respond, then your proposal was rejected. Repeat with higher proposal number.&lt;/li&gt;&#xA;&lt;li&gt;If received promises from the majority of acceptors, then we need to set value to our proposal.  Value for proposal = value of the highest proposal number received in the promise responses.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Accept phase: Now send an accept message to all the acceptors with your proposal number and the value you decided in the previous step. If you receive acks from majority, then consensus is reached. Else, repeat.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Note: Ballot number has to be unique across nodes. Else it breaks safety in Paxos. Maybe the nodes can memorize who sent what ballot as part of their promise and reject another node sending same ballot number.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consensus</title>
      <link>https://shashank-93rao.github.io/posts/consensus/</link>
      <pubDate>Mon, 29 Sep 2025 20:42:34 +0530</pubDate>
      <guid>https://shashank-93rao.github.io/posts/consensus/</guid>
      <description>&lt;p&gt;Requirements of consensus:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Single  proposed value is chosen&lt;/li&gt;&#xA;&lt;li&gt;Value chosen is proposed by the processes that are part of the system&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;what-do-consensus-algorithms-do-what-is-the-problem-they-solve&#34;&gt;&lt;strong&gt;What do consensus algorithms do? What is the problem they solve?&lt;/strong&gt; &lt;a href=&#34;#what-do-consensus-algorithms-do-what-is-the-problem-they-solve&#34; class=&#34;anchor&#34;&gt;ðŸ”—&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Consensus means agreement. In a distributed system, multiple nodes agreeing on a state is facilitated by consensus algorithms. But it&amp;rsquo;s not just one single value! Distributed systems keep getting a sequence of state change events that are constantly applied. All nodes will have to agree on the sequence of state changes as well. If Node A in a three node system of Nodes A, B, C receives a sequence of state changes X, Y, Z, then it needs to propagate this set of state changes to the remaining two nodes in the very same order. This is basically [[Log Replication]]!&#xA;Consensus and replication is closely related! Reliable, consistent and correct/safe replication requires consensus!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s dive into Bigtable</title>
      <link>https://shashank-93rao.github.io/posts/bigtable/</link>
      <pubDate>Fri, 06 Sep 2024 10:54:51 +0530</pubDate>
      <guid>https://shashank-93rao.github.io/posts/bigtable/</guid>
      <description>&lt;p&gt;Bigtable is a super fast, distributed storage system built to handle loads of structured dataâ€”think petabytes worthâ€”while keeping things quick and responsive. It&amp;rsquo;s the engine behind many Google products you know and love, like Google Analytics and Google Earth.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I&amp;rsquo;ll break down the key points from the original Google Bigtable paper. If you&amp;rsquo;re up for some deeper reading, I&amp;rsquo;ve linked the full paper at the endâ€”definitely worth a look!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo: An alternative to Jekyll</title>
      <link>https://shashank-93rao.github.io/posts/setup/</link>
      <pubDate>Sun, 01 Sep 2024 09:31:51 +0530</pubDate>
      <guid>https://shashank-93rao.github.io/posts/setup/</guid>
      <description>&lt;p&gt;Iâ€™ve always wanted to set up a vanity blog to showcase anything cool and awesome that Iâ€™ve worked on. Having seen a couple of my friends write blogs on WordPress and Blogger, these two blogging sites were the first to pop into my mind. However, for a simple use-case like mine, it seemed complicated and unnecessary. All I needed was a domain, a place to host my content, and an HTML generator to turn simple text into beautiful HTML.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
